using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using HeavenNails.Properties;
using System.Data.Entity;
using HeavenNails.Codes;
using HeavenNails.Database;
using System.Data.Linq;

namespace HeavenNails.PrimaryGoals
{
    public partial class Services : DevExpress.XtraEditors.XtraForm
    {
        Bitmap SaveBut = new Bitmap(Resources.save_16x16);
        Bitmap AddBut = new Bitmap(Resources.add_16x16);
        Bitmap CanelBut = new Bitmap(Resources.cancel_16x16);
        Bitmap DelBut = new Bitmap(Resources.deletetablerows_16x16);
        Bitmap EditBut =  new Bitmap(Resources.edit_16x16);

        public Services()
        {
            InitializeComponent();





            // This line of code is generated by Data Source Configuration Wizard
          
        }


        private void simpleButtonInsert_Click(object sender, EventArgs e)
        {
            if (simpleButtonInsert.Text == "Add")
            {
                simpleButtonInsert.Text = "Save";
                simpleButtonInsert.ImageOptions.Image = SaveBut;
                simpleButtonDel.Enabled = true;
                simpleButtonDel.Text = "Cancel";
                simpleButtonDel.ImageOptions.Image = CanelBut;
                simpleButtonUpdate.Enabled = false;
                textEditCost.Enabled = textEditName.Enabled = checkEditHide.Enabled = true;
                textEditName.Focus();
                textEditName.SelectAll();
            }
            else
            {
                if (textEditName.Text.Trim().Length == 0)
                {
                    dxErrorProviderS.SetError(textEditName, "Please enter name of service.");
                    MessageBox.Show("Can not add data to server, Please enter information in the red mark(s) on the window. To more information please hover your mouse on the red mark(s).", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    tb_Sevice NewService = new tb_Sevice();
                    NewService.Active = (bool)checkEditHide.EditValue;
                    NewService.Cost = Convert.ToDecimal(textEditCost.EditValue);
                    NewService.NameService = textEditName.Text.Trim();
                    if ((new DataAccess()).InsertService(NewService))//insert data
                    {
                        simpleButtonInsert.Text = "Add";
                        simpleButtonInsert.ImageOptions.Image = AddBut;
                        simpleButtonDel.Text = "Remove";
                        simpleButtonDel.ImageOptions.Image = DelBut;
                        simpleButtonUpdate.Enabled = true;
                        pLinqInstantFeedbackSourceService.Refresh();//Services_Load(null, null);
                        textEditCost.Enabled = textEditName.Enabled = checkEditHide.Enabled = false;

                    }
                }


            }

        }

        private void Services_Load(object sender, EventArgs e)
        {

           // gridControlListServices.DataSource = null;
            gridControlListServices.DataSource = pLinqInstantFeedbackSourceService;
           
//
        }
        private void pLinqInstantFeedbackSourceService_DismissEnumerable(object sender, DevExpress.Data.PLinq.GetEnumerableEventArgs e)
        {
            ((HeavenNailsModelDataContext)e.Tag).Dispose();
        }

        private void pLinqInstantFeedbackSourceService_GetEnumerable(object sender, DevExpress.Data.PLinq.GetEnumerableEventArgs e)
        {
            DataAccess Access = new DataAccess();
            List<Object> ListDa = Access.SelectAllServices();
            e.Source = (IEnumerable<Object>)ListDa[0];//((DataTable)ListDa[0]).AsEnumerable().Select(pt => new { SIndex = (decimal) pt["SIndex"] });
            e.Tag = ListDa[1];


        }

        private void simpleButtonUpdate_Click(object sender, EventArgs e)
        {

            if (gridViewListServices.FocusedRowHandle >= 0)
                if (simpleButtonUpdate.Text == "Edit")
                {
                    simpleButtonUpdate.Text = "Save";
                    simpleButtonUpdate.ImageOptions.Image = SaveBut;
                    simpleButtonInsert.Enabled = false;
                    simpleButtonDel.Enabled = true;
                    simpleButtonDel.Text = "Cancel";
                    simpleButtonDel.ImageOptions.Image = CanelBut;
                    textEditCost.Enabled = textEditName.Enabled = checkEditHide.Enabled = true;
                    textEditName.Focus();
                    textEditName.SelectAll();
                }
                else
                {
                    if (textEditName.Text.Trim().Length == 0)
                    {
                        dxErrorProviderS.SetError(textEditName, "Please enter name of service.");
                        MessageBox.Show("Can not add data to server, Please enter information in the red mark(s) on the window. To more information please hover your mouse on the red mark(s).", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {

                        tb_Sevice MService = new tb_Sevice();
                        MService.SIndex = Convert.ToDecimal(gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "ID"));
                        MService.Active = (bool)checkEditHide.EditValue;
                        MService.Cost = Convert.ToDecimal(textEditCost.EditValue);
                        MService.NameService = textEditName.Text.Trim();
                        if ((new DataAccess()).UpdateService(MService))
                        {

                            simpleButtonUpdate.Text = "Edit";
                            simpleButtonUpdate.ImageOptions.Image = SaveBut;
                            simpleButtonInsert.Enabled = true;
                            simpleButtonDel.Enabled = true;
                            simpleButtonDel.Text = "Remove";
                            simpleButtonDel.ImageOptions.Image = DelBut;
                            simpleButtonUpdate.ImageOptions.Image = EditBut;
                            textEditCost.Enabled = textEditName.Enabled = checkEditHide.Enabled = false;
                            pLinqInstantFeedbackSourceService.Refresh(); //Services_Load(null, null);
                        }

                    }
                }

        }

        private void simpleButtonDel_Click(object sender, EventArgs e)
        {
            if (simpleButtonDel.Text == "Cancel")
            {
                simpleButtonInsert.Text = "Add";
                simpleButtonUpdate.Enabled = true;
                simpleButtonDel.Text = "Remove";
                simpleButtonDel.ImageOptions.Image = DelBut;
                simpleButtonInsert.Enabled = true;
                simpleButtonUpdate.Text = "Edit";
                simpleButtonUpdate.ImageOptions.Image = EditBut;
                simpleButtonInsert.ImageOptions.Image = AddBut;
                textEditCost.Enabled = textEditName.Enabled = checkEditHide.Enabled = false;

            }
            else
            {
                if (gridViewListServices.GetSelectedRows().Length > 0)
                    if (MessageBox.Show("Are you sure to remove this service ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                    {
                        if (gridViewListServices.FocusedRowHandle >= 0)
                            if ((new DataAccess()).DeleteService(Convert.ToDecimal(gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "ID"))))
                            pLinqInstantFeedbackSourceService.Refresh();// Services_Load(null, null);
                    }
            }
        }

        private void textEditName_EditValueChanged(object sender, EventArgs e)
        {
            if (textEditName.Text.Trim().Length > 0)
                dxErrorProviderS.ClearErrors();
            else
                dxErrorProviderS.SetError(textEditName, "Please enter name of service.");
        }

        private void gridViewListServices_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if(e.FocusedRowHandle>=0)
            {
                
                textEditID.EditValue= gridViewListServices.GetRowCellValue(e.FocusedRowHandle, "SIndex");
                textEditName.EditValue= gridViewListServices.GetRowCellValue(e.FocusedRowHandle, "NameService");
                textEditCost.EditValue = gridViewListServices.GetRowCellValue(e.FocusedRowHandle, "Cost");
                checkEditHide.EditValue = gridViewListServices.GetRowCellValue(e.FocusedRowHandle, "Active");


            }
        }

        

        private void gridViewListServices_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (gridViewListServices.FocusedRowHandle >= 0)
            {
                textEditID.EditValue = gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "SIndex");
                textEditName.EditValue = gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "NameService");
                textEditCost.EditValue = gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "Cost");
                checkEditHide.EditValue = gridViewListServices.GetRowCellValue(gridViewListServices.FocusedRowHandle, "Active");

            }
        }

       

        private void gridViewListServices_RowLoaded(object sender, DevExpress.XtraGrid.Views.Base.RowEventArgs e)
        {
            gridViewListServices_RowClick(null, null);

        }

     
    }
}