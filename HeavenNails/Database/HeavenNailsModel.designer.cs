#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeavenNails.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HeavenNails")]
	public partial class HeavenNailsModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttb_Card(tb_Card instance);
    partial void Updatetb_Card(tb_Card instance);
    partial void Deletetb_Card(tb_Card instance);
    partial void Inserttb_Supplier(tb_Supplier instance);
    partial void Updatetb_Supplier(tb_Supplier instance);
    partial void Deletetb_Supplier(tb_Supplier instance);
    partial void Inserttb_ImportBill(tb_ImportBill instance);
    partial void Updatetb_ImportBill(tb_ImportBill instance);
    partial void Deletetb_ImportBill(tb_ImportBill instance);
    partial void Inserttb_Item(tb_Item instance);
    partial void Updatetb_Item(tb_Item instance);
    partial void Deletetb_Item(tb_Item instance);
    partial void Inserttb_ItemSoldReciept(tb_ItemSoldReciept instance);
    partial void Updatetb_ItemSoldReciept(tb_ItemSoldReciept instance);
    partial void Deletetb_ItemSoldReciept(tb_ItemSoldReciept instance);
    partial void Inserttb_LoyaltyCard(tb_LoyaltyCard instance);
    partial void Updatetb_LoyaltyCard(tb_LoyaltyCard instance);
    partial void Deletetb_LoyaltyCard(tb_LoyaltyCard instance);
    partial void Inserttb_QuantityItem(tb_QuantityItem instance);
    partial void Updatetb_QuantityItem(tb_QuantityItem instance);
    partial void Deletetb_QuantityItem(tb_QuantityItem instance);
    partial void Inserttb_Receipt(tb_Receipt instance);
    partial void Updatetb_Receipt(tb_Receipt instance);
    partial void Deletetb_Receipt(tb_Receipt instance);
    partial void Inserttb_ServiceReciept(tb_ServiceReciept instance);
    partial void Updatetb_ServiceReciept(tb_ServiceReciept instance);
    partial void Deletetb_ServiceReciept(tb_ServiceReciept instance);
    partial void Inserttb_Sevice(tb_Sevice instance);
    partial void Updatetb_Sevice(tb_Sevice instance);
    partial void Deletetb_Sevice(tb_Sevice instance);
    #endregion
		
		public HeavenNailsModelDataContext() : 
				base(global::HeavenNails.Properties.Settings.Default.HeavenNailsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HeavenNailsModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HeavenNailsModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HeavenNailsModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HeavenNailsModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tb_Card> tb_Cards
		{
			get
			{
				return this.GetTable<tb_Card>();
			}
		}
		
		public System.Data.Linq.Table<tb_Supplier> tb_Suppliers
		{
			get
			{
				return this.GetTable<tb_Supplier>();
			}
		}
		
		public System.Data.Linq.Table<tb_ImportBill> tb_ImportBills
		{
			get
			{
				return this.GetTable<tb_ImportBill>();
			}
		}
		
		public System.Data.Linq.Table<tb_Item> tb_Items
		{
			get
			{
				return this.GetTable<tb_Item>();
			}
		}
		
		public System.Data.Linq.Table<tb_ItemSoldReciept> tb_ItemSoldReciepts
		{
			get
			{
				return this.GetTable<tb_ItemSoldReciept>();
			}
		}
		
		public System.Data.Linq.Table<tb_LoyaltyCard> tb_LoyaltyCards
		{
			get
			{
				return this.GetTable<tb_LoyaltyCard>();
			}
		}
		
		public System.Data.Linq.Table<tb_QuantityItem> tb_QuantityItems
		{
			get
			{
				return this.GetTable<tb_QuantityItem>();
			}
		}
		
		public System.Data.Linq.Table<tb_Receipt> tb_Receipts
		{
			get
			{
				return this.GetTable<tb_Receipt>();
			}
		}
		
		public System.Data.Linq.Table<tb_ServiceReciept> tb_ServiceReciepts
		{
			get
			{
				return this.GetTable<tb_ServiceReciept>();
			}
		}
		
		public System.Data.Linq.Table<tb_Sevice> tb_Sevices
		{
			get
			{
				return this.GetTable<tb_Sevice>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Card")]
	public partial class tb_Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _CIndex;
		
		private string _BarCode;
		
		private int _ScanTime;
		
		private System.Nullable<System.DateTime> _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIndexChanging(decimal value);
    partial void OnCIndexChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnScanTimeChanging(int value);
    partial void OnScanTimeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public tb_Card()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal CIndex
		{
			get
			{
				return this._CIndex;
			}
			set
			{
				if ((this._CIndex != value))
				{
					this.OnCIndexChanging(value);
					this.SendPropertyChanging();
					this._CIndex = value;
					this.SendPropertyChanged("CIndex");
					this.OnCIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanTime", DbType="Int NOT NULL")]
		public int ScanTime
		{
			get
			{
				return this._ScanTime;
			}
			set
			{
				if ((this._ScanTime != value))
				{
					this.OnScanTimeChanging(value);
					this.SendPropertyChanging();
					this._ScanTime = value;
					this.SendPropertyChanged("ScanTime");
					this.OnScanTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Supplier")]
	public partial class tb_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SUIndex;
		
		private string _NameCompany;
		
		private string _EMail;
		
		private string _Phone;
		
		private string _Adress;
		
		private string _OtherInf;
		
		private EntitySet<tb_ImportBill> _tb_ImportBills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSUIndexChanging(decimal value);
    partial void OnSUIndexChanged();
    partial void OnNameCompanyChanging(string value);
    partial void OnNameCompanyChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAdressChanging(string value);
    partial void OnAdressChanged();
    partial void OnOtherInfChanging(string value);
    partial void OnOtherInfChanged();
    #endregion
		
		public tb_Supplier()
		{
			this._tb_ImportBills = new EntitySet<tb_ImportBill>(new Action<tb_ImportBill>(this.attach_tb_ImportBills), new Action<tb_ImportBill>(this.detach_tb_ImportBills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal SUIndex
		{
			get
			{
				return this._SUIndex;
			}
			set
			{
				if ((this._SUIndex != value))
				{
					this.OnSUIndexChanging(value);
					this.SendPropertyChanging();
					this._SUIndex = value;
					this.SendPropertyChanged("SUIndex");
					this.OnSUIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCompany", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NameCompany
		{
			get
			{
				return this._NameCompany;
			}
			set
			{
				if ((this._NameCompany != value))
				{
					this.OnNameCompanyChanging(value);
					this.SendPropertyChanging();
					this._NameCompany = value;
					this.SendPropertyChanged("NameCompany");
					this.OnNameCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(200)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adress", DbType="NVarChar(350)")]
		public string Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				if ((this._Adress != value))
				{
					this.OnAdressChanging(value);
					this.SendPropertyChanging();
					this._Adress = value;
					this.SendPropertyChanged("Adress");
					this.OnAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherInf", DbType="NVarChar(MAX)")]
		public string OtherInf
		{
			get
			{
				return this._OtherInf;
			}
			set
			{
				if ((this._OtherInf != value))
				{
					this.OnOtherInfChanging(value);
					this.SendPropertyChanging();
					this._OtherInf = value;
					this.SendPropertyChanged("OtherInf");
					this.OnOtherInfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Supplier_tb_ImportBill", Storage="_tb_ImportBills", ThisKey="SUIndex", OtherKey="SUIndex")]
		public EntitySet<tb_ImportBill> tb_ImportBills
		{
			get
			{
				return this._tb_ImportBills;
			}
			set
			{
				this._tb_ImportBills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ImportBills(tb_ImportBill entity)
		{
			this.SendPropertyChanging();
			entity.tb_Supplier = this;
		}
		
		private void detach_tb_ImportBills(tb_ImportBill entity)
		{
			this.SendPropertyChanging();
			entity.tb_Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ImportBills")]
	public partial class tb_ImportBill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IMIndex;
		
		private decimal _SUIndex;
		
		private decimal _Total;
		
		private System.Data.Linq.Binary _ImageBill;
		
		private EntitySet<tb_Item> _tb_Items;
		
		private EntityRef<tb_Supplier> _tb_Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIMIndexChanging(decimal value);
    partial void OnIMIndexChanged();
    partial void OnSUIndexChanging(decimal value);
    partial void OnSUIndexChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    partial void OnImageBillChanging(System.Data.Linq.Binary value);
    partial void OnImageBillChanged();
    #endregion
		
		public tb_ImportBill()
		{
			this._tb_Items = new EntitySet<tb_Item>(new Action<tb_Item>(this.attach_tb_Items), new Action<tb_Item>(this.detach_tb_Items));
			this._tb_Supplier = default(EntityRef<tb_Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal IMIndex
		{
			get
			{
				return this._IMIndex;
			}
			set
			{
				if ((this._IMIndex != value))
				{
					this.OnIMIndexChanging(value);
					this.SendPropertyChanging();
					this._IMIndex = value;
					this.SendPropertyChanged("IMIndex");
					this.OnIMIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal SUIndex
		{
			get
			{
				return this._SUIndex;
			}
			set
			{
				if ((this._SUIndex != value))
				{
					if (this._tb_Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUIndexChanging(value);
					this.SendPropertyChanging();
					this._SUIndex = value;
					this.SendPropertyChanged("SUIndex");
					this.OnSUIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageBill", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageBill
		{
			get
			{
				return this._ImageBill;
			}
			set
			{
				if ((this._ImageBill != value))
				{
					this.OnImageBillChanging(value);
					this.SendPropertyChanging();
					this._ImageBill = value;
					this.SendPropertyChanged("ImageBill");
					this.OnImageBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_ImportBill_tb_Item", Storage="_tb_Items", ThisKey="IMIndex", OtherKey="IMIndex")]
		public EntitySet<tb_Item> tb_Items
		{
			get
			{
				return this._tb_Items;
			}
			set
			{
				this._tb_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Supplier_tb_ImportBill", Storage="_tb_Supplier", ThisKey="SUIndex", OtherKey="SUIndex", IsForeignKey=true)]
		public tb_Supplier tb_Supplier
		{
			get
			{
				return this._tb_Supplier.Entity;
			}
			set
			{
				tb_Supplier previousValue = this._tb_Supplier.Entity;
				if (((previousValue != value) 
							|| (this._tb_Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Supplier.Entity = null;
						previousValue.tb_ImportBills.Remove(this);
					}
					this._tb_Supplier.Entity = value;
					if ((value != null))
					{
						value.tb_ImportBills.Add(this);
						this._SUIndex = value.SUIndex;
					}
					else
					{
						this._SUIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_Items(tb_Item entity)
		{
			this.SendPropertyChanging();
			entity.tb_ImportBill = this;
		}
		
		private void detach_tb_Items(tb_Item entity)
		{
			this.SendPropertyChanging();
			entity.tb_ImportBill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Item")]
	public partial class tb_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IIndex;
		
		private string _NameItem;
		
		private decimal _ImportPrice;
		
		private decimal _SellingPrice;
		
		private decimal _IMIndex;
		
		private EntitySet<tb_QuantityItem> _tb_QuantityItems;
		
		private EntityRef<tb_ImportBill> _tb_ImportBill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIndexChanging(decimal value);
    partial void OnIIndexChanged();
    partial void OnNameItemChanging(string value);
    partial void OnNameItemChanged();
    partial void OnImportPriceChanging(decimal value);
    partial void OnImportPriceChanged();
    partial void OnSellingPriceChanging(decimal value);
    partial void OnSellingPriceChanged();
    partial void OnIMIndexChanging(decimal value);
    partial void OnIMIndexChanged();
    #endregion
		
		public tb_Item()
		{
			this._tb_QuantityItems = new EntitySet<tb_QuantityItem>(new Action<tb_QuantityItem>(this.attach_tb_QuantityItems), new Action<tb_QuantityItem>(this.detach_tb_QuantityItems));
			this._tb_ImportBill = default(EntityRef<tb_ImportBill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal IIndex
		{
			get
			{
				return this._IIndex;
			}
			set
			{
				if ((this._IIndex != value))
				{
					this.OnIIndexChanging(value);
					this.SendPropertyChanging();
					this._IIndex = value;
					this.SendPropertyChanged("IIndex");
					this.OnIIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameItem", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NameItem
		{
			get
			{
				return this._NameItem;
			}
			set
			{
				if ((this._NameItem != value))
				{
					this.OnNameItemChanging(value);
					this.SendPropertyChanging();
					this._NameItem = value;
					this.SendPropertyChanged("NameItem");
					this.OnNameItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportPrice", DbType="Money NOT NULL")]
		public decimal ImportPrice
		{
			get
			{
				return this._ImportPrice;
			}
			set
			{
				if ((this._ImportPrice != value))
				{
					this.OnImportPriceChanging(value);
					this.SendPropertyChanging();
					this._ImportPrice = value;
					this.SendPropertyChanged("ImportPrice");
					this.OnImportPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Money NOT NULL")]
		public decimal SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal IMIndex
		{
			get
			{
				return this._IMIndex;
			}
			set
			{
				if ((this._IMIndex != value))
				{
					if (this._tb_ImportBill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMIndexChanging(value);
					this.SendPropertyChanging();
					this._IMIndex = value;
					this.SendPropertyChanged("IMIndex");
					this.OnIMIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Item_tb_QuantityItem", Storage="_tb_QuantityItems", ThisKey="IIndex", OtherKey="IIndex")]
		public EntitySet<tb_QuantityItem> tb_QuantityItems
		{
			get
			{
				return this._tb_QuantityItems;
			}
			set
			{
				this._tb_QuantityItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_ImportBill_tb_Item", Storage="_tb_ImportBill", ThisKey="IMIndex", OtherKey="IMIndex", IsForeignKey=true)]
		public tb_ImportBill tb_ImportBill
		{
			get
			{
				return this._tb_ImportBill.Entity;
			}
			set
			{
				tb_ImportBill previousValue = this._tb_ImportBill.Entity;
				if (((previousValue != value) 
							|| (this._tb_ImportBill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_ImportBill.Entity = null;
						previousValue.tb_Items.Remove(this);
					}
					this._tb_ImportBill.Entity = value;
					if ((value != null))
					{
						value.tb_Items.Add(this);
						this._IMIndex = value.IMIndex;
					}
					else
					{
						this._IMIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_ImportBill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_QuantityItems(tb_QuantityItem entity)
		{
			this.SendPropertyChanging();
			entity.tb_Item = this;
		}
		
		private void detach_tb_QuantityItems(tb_QuantityItem entity)
		{
			this.SendPropertyChanging();
			entity.tb_Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ItemSoldReciept")]
	public partial class tb_ItemSoldReciept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SOIndex;
		
		private decimal _SellingPrice;
		
		private decimal _QIIndex;
		
		private decimal _RIndex;
		
		private decimal _ImportPrice;
		
		private EntityRef<tb_QuantityItem> _tb_QuantityItem;
		
		private EntityRef<tb_Receipt> _tb_Receipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSOIndexChanging(decimal value);
    partial void OnSOIndexChanged();
    partial void OnSellingPriceChanging(decimal value);
    partial void OnSellingPriceChanged();
    partial void OnQIIndexChanging(decimal value);
    partial void OnQIIndexChanged();
    partial void OnRIndexChanging(decimal value);
    partial void OnRIndexChanged();
    partial void OnImportPriceChanging(decimal value);
    partial void OnImportPriceChanged();
    #endregion
		
		public tb_ItemSoldReciept()
		{
			this._tb_QuantityItem = default(EntityRef<tb_QuantityItem>);
			this._tb_Receipt = default(EntityRef<tb_Receipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal SOIndex
		{
			get
			{
				return this._SOIndex;
			}
			set
			{
				if ((this._SOIndex != value))
				{
					this.OnSOIndexChanging(value);
					this.SendPropertyChanging();
					this._SOIndex = value;
					this.SendPropertyChanged("SOIndex");
					this.OnSOIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Money NOT NULL")]
		public decimal SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QIIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal QIIndex
		{
			get
			{
				return this._QIIndex;
			}
			set
			{
				if ((this._QIIndex != value))
				{
					if (this._tb_QuantityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIIndexChanging(value);
					this.SendPropertyChanging();
					this._QIIndex = value;
					this.SendPropertyChanged("QIIndex");
					this.OnQIIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal RIndex
		{
			get
			{
				return this._RIndex;
			}
			set
			{
				if ((this._RIndex != value))
				{
					if (this._tb_Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIndexChanging(value);
					this.SendPropertyChanging();
					this._RIndex = value;
					this.SendPropertyChanged("RIndex");
					this.OnRIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportPrice", DbType="Money NOT NULL")]
		public decimal ImportPrice
		{
			get
			{
				return this._ImportPrice;
			}
			set
			{
				if ((this._ImportPrice != value))
				{
					this.OnImportPriceChanging(value);
					this.SendPropertyChanging();
					this._ImportPrice = value;
					this.SendPropertyChanged("ImportPrice");
					this.OnImportPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_QuantityItem_tb_ItemSoldReciept", Storage="_tb_QuantityItem", ThisKey="QIIndex", OtherKey="QIIndex", IsForeignKey=true)]
		public tb_QuantityItem tb_QuantityItem
		{
			get
			{
				return this._tb_QuantityItem.Entity;
			}
			set
			{
				tb_QuantityItem previousValue = this._tb_QuantityItem.Entity;
				if (((previousValue != value) 
							|| (this._tb_QuantityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_QuantityItem.Entity = null;
						previousValue.tb_ItemSoldReciepts.Remove(this);
					}
					this._tb_QuantityItem.Entity = value;
					if ((value != null))
					{
						value.tb_ItemSoldReciepts.Add(this);
						this._QIIndex = value.QIIndex;
					}
					else
					{
						this._QIIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_QuantityItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Receipt_tb_ItemSoldReciept", Storage="_tb_Receipt", ThisKey="RIndex", OtherKey="RIndex", IsForeignKey=true)]
		public tb_Receipt tb_Receipt
		{
			get
			{
				return this._tb_Receipt.Entity;
			}
			set
			{
				tb_Receipt previousValue = this._tb_Receipt.Entity;
				if (((previousValue != value) 
							|| (this._tb_Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Receipt.Entity = null;
						previousValue.tb_ItemSoldReciepts.Remove(this);
					}
					this._tb_Receipt.Entity = value;
					if ((value != null))
					{
						value.tb_ItemSoldReciepts.Add(this);
						this._RIndex = value.RIndex;
					}
					else
					{
						this._RIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_Receipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_LoyaltyCard")]
	public partial class tb_LoyaltyCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _LIndex;
		
		private decimal _Addition;
		
		private System.Nullable<double> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIndexChanging(decimal value);
    partial void OnLIndexChanged();
    partial void OnAdditionChanging(decimal value);
    partial void OnAdditionChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    #endregion
		
		public tb_LoyaltyCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal LIndex
		{
			get
			{
				return this._LIndex;
			}
			set
			{
				if ((this._LIndex != value))
				{
					this.OnLIndexChanging(value);
					this.SendPropertyChanging();
					this._LIndex = value;
					this.SendPropertyChanged("LIndex");
					this.OnLIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addition", DbType="Money NOT NULL")]
		public decimal Addition
		{
			get
			{
				return this._Addition;
			}
			set
			{
				if ((this._Addition != value))
				{
					this.OnAdditionChanging(value);
					this.SendPropertyChanging();
					this._Addition = value;
					this.SendPropertyChanged("Addition");
					this.OnAdditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_QuantityItem")]
	public partial class tb_QuantityItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BarCode;
		
		private bool _Sold;
		
		private decimal _IIndex;
		
		private decimal _QIIndex;
		
		private EntitySet<tb_ItemSoldReciept> _tb_ItemSoldReciepts;
		
		private EntityRef<tb_Item> _tb_Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnSoldChanging(bool value);
    partial void OnSoldChanged();
    partial void OnIIndexChanging(decimal value);
    partial void OnIIndexChanged();
    partial void OnQIIndexChanging(decimal value);
    partial void OnQIIndexChanged();
    #endregion
		
		public tb_QuantityItem()
		{
			this._tb_ItemSoldReciepts = new EntitySet<tb_ItemSoldReciept>(new Action<tb_ItemSoldReciept>(this.attach_tb_ItemSoldReciepts), new Action<tb_ItemSoldReciept>(this.detach_tb_ItemSoldReciepts));
			this._tb_Item = default(EntityRef<tb_Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sold", DbType="Bit NOT NULL")]
		public bool Sold
		{
			get
			{
				return this._Sold;
			}
			set
			{
				if ((this._Sold != value))
				{
					this.OnSoldChanging(value);
					this.SendPropertyChanging();
					this._Sold = value;
					this.SendPropertyChanged("Sold");
					this.OnSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal IIndex
		{
			get
			{
				return this._IIndex;
			}
			set
			{
				if ((this._IIndex != value))
				{
					if (this._tb_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIIndexChanging(value);
					this.SendPropertyChanging();
					this._IIndex = value;
					this.SendPropertyChanged("IIndex");
					this.OnIIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QIIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal QIIndex
		{
			get
			{
				return this._QIIndex;
			}
			set
			{
				if ((this._QIIndex != value))
				{
					this.OnQIIndexChanging(value);
					this.SendPropertyChanging();
					this._QIIndex = value;
					this.SendPropertyChanged("QIIndex");
					this.OnQIIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_QuantityItem_tb_ItemSoldReciept", Storage="_tb_ItemSoldReciepts", ThisKey="QIIndex", OtherKey="QIIndex")]
		public EntitySet<tb_ItemSoldReciept> tb_ItemSoldReciepts
		{
			get
			{
				return this._tb_ItemSoldReciepts;
			}
			set
			{
				this._tb_ItemSoldReciepts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Item_tb_QuantityItem", Storage="_tb_Item", ThisKey="IIndex", OtherKey="IIndex", IsForeignKey=true)]
		public tb_Item tb_Item
		{
			get
			{
				return this._tb_Item.Entity;
			}
			set
			{
				tb_Item previousValue = this._tb_Item.Entity;
				if (((previousValue != value) 
							|| (this._tb_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Item.Entity = null;
						previousValue.tb_QuantityItems.Remove(this);
					}
					this._tb_Item.Entity = value;
					if ((value != null))
					{
						value.tb_QuantityItems.Add(this);
						this._IIndex = value.IIndex;
					}
					else
					{
						this._IIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ItemSoldReciepts(tb_ItemSoldReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_QuantityItem = this;
		}
		
		private void detach_tb_ItemSoldReciepts(tb_ItemSoldReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_QuantityItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Receipt")]
	public partial class tb_Receipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _RIndex;
		
		private string _Time;
		
		private System.DateTime _Date;
		
		private decimal _Total;
		
		private decimal _Cash;
		
		private decimal _Eftpos;
		
		private decimal _GivenCash;
		
		private decimal _Change;
		
		private EntitySet<tb_ItemSoldReciept> _tb_ItemSoldReciepts;
		
		private EntitySet<tb_ServiceReciept> _tb_ServiceReciepts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRIndexChanging(decimal value);
    partial void OnRIndexChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    partial void OnCashChanging(decimal value);
    partial void OnCashChanged();
    partial void OnEftposChanging(decimal value);
    partial void OnEftposChanged();
    partial void OnGivenCashChanging(decimal value);
    partial void OnGivenCashChanged();
    partial void OnChangeChanging(decimal value);
    partial void OnChangeChanged();
    #endregion
		
		public tb_Receipt()
		{
			this._tb_ItemSoldReciepts = new EntitySet<tb_ItemSoldReciept>(new Action<tb_ItemSoldReciept>(this.attach_tb_ItemSoldReciepts), new Action<tb_ItemSoldReciept>(this.detach_tb_ItemSoldReciepts));
			this._tb_ServiceReciepts = new EntitySet<tb_ServiceReciept>(new Action<tb_ServiceReciept>(this.attach_tb_ServiceReciepts), new Action<tb_ServiceReciept>(this.detach_tb_ServiceReciepts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal RIndex
		{
			get
			{
				return this._RIndex;
			}
			set
			{
				if ((this._RIndex != value))
				{
					this.OnRIndexChanging(value);
					this.SendPropertyChanging();
					this._RIndex = value;
					this.SendPropertyChanged("RIndex");
					this.OnRIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(18,2) NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cash", DbType="Money NOT NULL")]
		public decimal Cash
		{
			get
			{
				return this._Cash;
			}
			set
			{
				if ((this._Cash != value))
				{
					this.OnCashChanging(value);
					this.SendPropertyChanging();
					this._Cash = value;
					this.SendPropertyChanged("Cash");
					this.OnCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eftpos", DbType="Money NOT NULL")]
		public decimal Eftpos
		{
			get
			{
				return this._Eftpos;
			}
			set
			{
				if ((this._Eftpos != value))
				{
					this.OnEftposChanging(value);
					this.SendPropertyChanging();
					this._Eftpos = value;
					this.SendPropertyChanged("Eftpos");
					this.OnEftposChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenCash", DbType="Money NOT NULL")]
		public decimal GivenCash
		{
			get
			{
				return this._GivenCash;
			}
			set
			{
				if ((this._GivenCash != value))
				{
					this.OnGivenCashChanging(value);
					this.SendPropertyChanging();
					this._GivenCash = value;
					this.SendPropertyChanged("GivenCash");
					this.OnGivenCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="Money NOT NULL")]
		public decimal Change
		{
			get
			{
				return this._Change;
			}
			set
			{
				if ((this._Change != value))
				{
					this.OnChangeChanging(value);
					this.SendPropertyChanging();
					this._Change = value;
					this.SendPropertyChanged("Change");
					this.OnChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Receipt_tb_ItemSoldReciept", Storage="_tb_ItemSoldReciepts", ThisKey="RIndex", OtherKey="RIndex")]
		public EntitySet<tb_ItemSoldReciept> tb_ItemSoldReciepts
		{
			get
			{
				return this._tb_ItemSoldReciepts;
			}
			set
			{
				this._tb_ItemSoldReciepts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Receipt_tb_ServiceReciept", Storage="_tb_ServiceReciepts", ThisKey="RIndex", OtherKey="RIndex")]
		public EntitySet<tb_ServiceReciept> tb_ServiceReciepts
		{
			get
			{
				return this._tb_ServiceReciepts;
			}
			set
			{
				this._tb_ServiceReciepts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ItemSoldReciepts(tb_ItemSoldReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Receipt = this;
		}
		
		private void detach_tb_ItemSoldReciepts(tb_ItemSoldReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Receipt = null;
		}
		
		private void attach_tb_ServiceReciepts(tb_ServiceReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Receipt = this;
		}
		
		private void detach_tb_ServiceReciepts(tb_ServiceReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Receipt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ServiceReciept")]
	public partial class tb_ServiceReciept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SRIndex;
		
		private decimal _Cost;
		
		private decimal _RIndex;
		
		private decimal _SIndex;
		
		private string _NameService;
		
		private EntityRef<tb_Receipt> _tb_Receipt;
		
		private EntityRef<tb_Sevice> _tb_Sevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSRIndexChanging(decimal value);
    partial void OnSRIndexChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnRIndexChanging(decimal value);
    partial void OnRIndexChanged();
    partial void OnSIndexChanging(decimal value);
    partial void OnSIndexChanged();
    partial void OnNameServiceChanging(string value);
    partial void OnNameServiceChanged();
    #endregion
		
		public tb_ServiceReciept()
		{
			this._tb_Receipt = default(EntityRef<tb_Receipt>);
			this._tb_Sevice = default(EntityRef<tb_Sevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal SRIndex
		{
			get
			{
				return this._SRIndex;
			}
			set
			{
				if ((this._SRIndex != value))
				{
					this.OnSRIndexChanging(value);
					this.SendPropertyChanging();
					this._SRIndex = value;
					this.SendPropertyChanged("SRIndex");
					this.OnSRIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal RIndex
		{
			get
			{
				return this._RIndex;
			}
			set
			{
				if ((this._RIndex != value))
				{
					if (this._tb_Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRIndexChanging(value);
					this.SendPropertyChanging();
					this._RIndex = value;
					this.SendPropertyChanged("RIndex");
					this.OnRIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIndex", DbType="Decimal(18,0) NOT NULL")]
		public decimal SIndex
		{
			get
			{
				return this._SIndex;
			}
			set
			{
				if ((this._SIndex != value))
				{
					if (this._tb_Sevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIndexChanging(value);
					this.SendPropertyChanging();
					this._SIndex = value;
					this.SendPropertyChanged("SIndex");
					this.OnSIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameService", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NameService
		{
			get
			{
				return this._NameService;
			}
			set
			{
				if ((this._NameService != value))
				{
					this.OnNameServiceChanging(value);
					this.SendPropertyChanging();
					this._NameService = value;
					this.SendPropertyChanged("NameService");
					this.OnNameServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Receipt_tb_ServiceReciept", Storage="_tb_Receipt", ThisKey="RIndex", OtherKey="RIndex", IsForeignKey=true)]
		public tb_Receipt tb_Receipt
		{
			get
			{
				return this._tb_Receipt.Entity;
			}
			set
			{
				tb_Receipt previousValue = this._tb_Receipt.Entity;
				if (((previousValue != value) 
							|| (this._tb_Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Receipt.Entity = null;
						previousValue.tb_ServiceReciepts.Remove(this);
					}
					this._tb_Receipt.Entity = value;
					if ((value != null))
					{
						value.tb_ServiceReciepts.Add(this);
						this._RIndex = value.RIndex;
					}
					else
					{
						this._RIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_Receipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Sevice_tb_ServiceReciept", Storage="_tb_Sevice", ThisKey="SIndex", OtherKey="SIndex", IsForeignKey=true)]
		public tb_Sevice tb_Sevice
		{
			get
			{
				return this._tb_Sevice.Entity;
			}
			set
			{
				tb_Sevice previousValue = this._tb_Sevice.Entity;
				if (((previousValue != value) 
							|| (this._tb_Sevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Sevice.Entity = null;
						previousValue.tb_ServiceReciepts.Remove(this);
					}
					this._tb_Sevice.Entity = value;
					if ((value != null))
					{
						value.tb_ServiceReciepts.Add(this);
						this._SIndex = value.SIndex;
					}
					else
					{
						this._SIndex = default(decimal);
					}
					this.SendPropertyChanged("tb_Sevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Sevices")]
	public partial class tb_Sevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SIndex;
		
		private string _NameService;
		
		private decimal _Cost;
		
		private bool _Active;
		
		private EntitySet<tb_ServiceReciept> _tb_ServiceReciepts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIndexChanging(decimal value);
    partial void OnSIndexChanged();
    partial void OnNameServiceChanging(string value);
    partial void OnNameServiceChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public tb_Sevice()
		{
			this._tb_ServiceReciepts = new EntitySet<tb_ServiceReciept>(new Action<tb_ServiceReciept>(this.attach_tb_ServiceReciepts), new Action<tb_ServiceReciept>(this.detach_tb_ServiceReciepts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIndex", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal SIndex
		{
			get
			{
				return this._SIndex;
			}
			set
			{
				if ((this._SIndex != value))
				{
					this.OnSIndexChanging(value);
					this.SendPropertyChanging();
					this._SIndex = value;
					this.SendPropertyChanged("SIndex");
					this.OnSIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameService", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NameService
		{
			get
			{
				return this._NameService;
			}
			set
			{
				if ((this._NameService != value))
				{
					this.OnNameServiceChanging(value);
					this.SendPropertyChanging();
					this._NameService = value;
					this.SendPropertyChanged("NameService");
					this.OnNameServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Sevice_tb_ServiceReciept", Storage="_tb_ServiceReciepts", ThisKey="SIndex", OtherKey="SIndex")]
		public EntitySet<tb_ServiceReciept> tb_ServiceReciepts
		{
			get
			{
				return this._tb_ServiceReciepts;
			}
			set
			{
				this._tb_ServiceReciepts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ServiceReciepts(tb_ServiceReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Sevice = this;
		}
		
		private void detach_tb_ServiceReciepts(tb_ServiceReciept entity)
		{
			this.SendPropertyChanging();
			entity.tb_Sevice = null;
		}
	}
}
#pragma warning restore 1591
